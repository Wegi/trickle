// Generated by CoffeeScript 1.8.0
var OAuth, a, access_secret, access_token, async, consumerSecret, consumer_key, first, oauth, readline, rl, second, token, token_secret, twitter_req;

a = 'QWJHZkNEOWJxWXBLcDBtYmtqTVF2QTJRWWxnWlZlUGNuZHcwMkxvOHBYSmdpVDk2WHk=';

consumerSecret = new Buffer(a, 'base64').toString('utf8');

consumer_key = '8CMdYgIYpDM6uknWRAfWEhGEj';

OAuth = require('oauth').OAuth;

readline = require('readline');

twitter_req = require('twitter-request');

async = require('async');

rl = readline.createInterface(process.stdin, process.stdout);

oauth = new OAuth("https://api.twitter.com/oauth/request_token", "https://api.twitter.com/oauth/access_token", consumer_key, consumerSecret, "1.0", "oob", "HMAC-SHA1");

token = '';

token_secret = '';

access_token = '';

access_secret = '';

first = function(callback) {
  return oauth.getOAuthRequestToken(function(error, user_token, user_secret, results) {
    token = user_token;
    token_secret = user_secret;
    console.log('https://twitter.com/oauth/authenticate?oauth_token=' + user_token);
    return rl.question('Please Enter the PIN: ', function(PIN) {
      rl.close();
      process.stdin.destroy();
      return oauth.getOAuthAccessToken(token, token_secret, PIN, function(error, oauth_access_token, oauth_access_token_secret, results) {
        if (error) {
          return console.log(error);
        } else {
          access_token = oauth_access_token;
          access_secret = oauth_access_token_secret;
          console.log("Alles Tutti: " + access_token);
          return callback(null, access_token);
        }
      });
    });
  });
};

second = function(callback) {
  var query, readyoauth, treq;
  readyoauth = {
    consumer_key: consumer_key,
    consumer_secret: consumerSecret,
    token: access_token,
    token_secret: access_secret
  };
  treq = new twitter_req(readyoauth);
  query = {
    'count': 20
  };
  return treq.request('statuses/home_timeline', query, function(err, res, body) {
    return callback(null, body);
  });
};

async.series({
  one: first,
  two: second
}, function(err, result) {
  var item, _i, _len, _ref, _results;
  _ref = JSON.parse(result.two);
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    item = _ref[_i];
    _results.push(console.log(item.text));
  }
  return _results;
});
