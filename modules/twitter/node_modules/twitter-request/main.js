/*
 * Twitter Request
 * Make request to the Twitter API
 */

var util = require('util'),
    request = require('request'),
    qs = require('querystring');

/**
 * Make request to the Twitter API
 * @param options
 * @constructor
 */
var TwitterRequest = function(options){
  if(!(options.consumer_key && options.consumer_secret))
    throw new Error('TwitterRequest need a public and secret consumer key');

  this.oauth = {
    consumer_key: options.consumer_key,
    consumer_secret: options.consumer_secret,

    token: options.token,
    token_secret: options.token_secret
  };
};

// Save Endpoints
TwitterRequest.endpoints = require(__dirname + '/endpoints');

/**
 * POST Request to Twitter API
 * @param url
 * @param body
 * @param cb
 */
TwitterRequest.prototype.post = function(url, body, cb){
  cb = cb || function(){};

  return request.post(url, {body: body, oauth: this.oauth}, function(err, res, body){
    if(err) return cb(err);

    cb(null, res, body);
  });
};

/**
 * GET Request to Twitter API
 * @param   {string}  url
 * @param   {string}  cb
 * @returns {Request} {*}
 */
TwitterRequest.prototype.get = function(url, cb){
  cb = cb || function(){};

  return request.get(url, {oauth: this.oauth}, function(err, res, body){
    if(err) return cb(err);

    cb(null, res, body);
  });
};

/**
 * Make a request to the Twitter API
 * @param  {string}   endpoint [Endpoint name]
 * @param  {object}   options  [Options (body, query, params)]
 * @param  {Function} cb       [Request callback]
 * @return {Request}           [Return object from request module]
 */
TwitterRequest.prototype.request = function(endpoint, options, cb){
  if(!TwitterRequest.endpoints[endpoint]) throw new Error('Endpoint ' + endpoint + ' not found !');

  options = options || {};
  options.body = options.body || {};
  endpoint = TwitterRequest.endpoints[endpoint];
  cb = cb || function(){};

  if(typeof options === 'function') cb = options;

  // Adding the query to the url
  var url = endpoint.url;
  url += (options.query ? ('?' + qs.stringify(options.query)) : '');

  if(options.params)
    for(var param in options.params)
      if(options.params.hasOwnProperty(param)) url = url.replace(':' + param, options.params[param]);

  var body = qs.stringify(options.body);
  console.log('TwitterRequest#request() - ' + endpoint.method.toUpperCase() + ' request to "' + url + '" with body "' + body + '"');

  switch(endpoint.method){
    case 'get':
      return this.get(url, cb);
      break;

    case 'post':
      return this.post(url, body, cb);
      break;
  }

  throw new Error('Endpoint ' + endpoint + ' has no valid HTTP Method !');
};

module.exports = TwitterRequest;