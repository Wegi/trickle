// Generated by CoffeeScript 1.8.0

/*
    Trickle Core
 */
var fs, gui, home_path, root, win;

root = typeof exports !== "undefined" && exports !== null ? exports : this;


/* Require modules */

fs = require("fs");


/* Global variables */

root.session = {};

gui = require("nw.gui");

win = gui.Window.get();

home_path = process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;

if (!fs.existsSync(home_path + '/.trickle')) {
  fs.mkdirSync(home_path + '/.trickle');
}

if (!fs.existsSync(home_path + '/.trickle/session.json')) {
  fs.writeFileSync(home_path + '/.trickle/session.json', '{ }');
}

try {
  fs.readFile(home_path + '/.trickle/session.json', "utf8", function(err, data) {
    if (err) {
      return console.error(err);
    } else {
      try {
        return root.session = JSON.parse(data);
      } catch (_error) {
        return console.log("close call");
      }
    }
  });
} catch (_error) {
  console.log("gotcha buddy");
  root.session = {};
}

win.on("close", function() {
  var jsonified;
  this.hide();
  if (!root.session.boxes) {
    root.session["boxes"] = {};
  }
  $(".box-modules").each(function(index) {
    var id;
    id = '#' + this.id;
    if (!root.session.boxes["" + id]) {
      root.session.boxes["" + id] = {};
    }
    root.session.boxes["" + id].position = $(id).offset();
    root.session.boxes["" + id].content = $(id).html();
    root.session.boxes["" + id].size = {
      "height": $(id).height(),
      "width": $(id).width()
    };
    if (loaded_modules[id]) {
      return root.session.boxes[id].loaded_modules = loaded_modules[id];
    }
  });
  root.session.present_boxes = present_boxes;
  jsonified = JSON.stringify(root.session, null, 4);
  fs.writeFileSync(home_path + '/.trickle/session.json', jsonified, 'utf8');
  return gui.App.quit();
});
